{"version":3,"sources":["components/Drumkey.js","components/Drumpad.js","App.js","serviceWorker.js","index.js"],"names":["Drumkey","audioSrc","React","createRef","playAudio","current","currentTime","play","handleActions","event","props","handleDisplay","id","this","keyS","onClick","className","data-name","name","ref","src","Component","soundData","keyCode","keyTrigger","url","Drumpad","state","soundName","updateDisplay","setState","target","getAttribute","document","addEventListener","e","key","toUpperCase","drumKey","getElementById","keyPad","map","item","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wNAiDeA,E,4MA1CfC,SAAUC,IAAMC,Y,EAEhBC,UAAU,WAER,EAAKH,SAASI,QAAQC,YAAa,EACnC,EAAKL,SAASI,QAAQE,Q,EAIxBC,cAAc,SAACC,GACb,EAAKL,YACL,EAAKM,MAAMC,cAAcF,I,uDAKvB,OAEA,yBACAG,GAAI,OAAOC,KAAKH,MAAMI,KAEtBC,QAASF,KAAKL,cACdQ,UAAU,WACVC,YAAWJ,KAAKH,MAAMQ,MAGrBL,KAAKH,MAAMI,KACV,2BACAF,GAAIC,KAAKH,MAAMI,KACfE,UAAU,OACVG,IAAKN,KAAKZ,SACVmB,IAAKP,KAAKH,MAAMU,W,GAjCAC,aCFhBC,EAAY,CAAC,CACfC,QAAS,GACTC,WAAY,IACZZ,GAAI,WACJa,IAAK,4DACJ,CACDF,QAAS,GACTC,WAAY,IACZZ,GAAI,WACJa,IAAK,4DACJ,CACDF,QAAS,GACTC,WAAY,IACZZ,GAAI,WACJa,IAAK,4DACJ,CACDF,QAAS,GACTC,WAAY,IACZZ,GAAI,WACJa,IAAK,8DACJ,CACDF,QAAS,GACTC,WAAY,IACZZ,GAAI,OACJa,IAAK,4DACJ,CACDF,QAAS,GACTC,WAAY,IACZZ,GAAI,UACJa,IAAK,0DACJ,CACDF,QAAS,GACTC,WAAY,IACZZ,GAAI,cACJa,IAAK,8DACJ,CACDF,QAAS,GACTC,WAAY,IACZZ,GAAI,OACJa,IAAK,8DACJ,CACDF,QAAS,GACTC,WAAY,IACZZ,GAAI,YACJa,IAAK,2DA+DMC,E,4MAtDbC,MAAM,CAACC,UAAU,Q,EAEnBC,cAAc,SAACpB,GAER,EAAKqB,SAAS,CAACF,UAAUnB,EAAMsB,OAAOC,aAAa,gB,kEAOtDC,SAASC,iBAAiB,WAAU,SAACC,GACnC,IAAMvB,EAAKuB,EAAEC,IAAIC,cAEZC,EAAUL,SAASM,eAAe3B,GAErC0B,IACDA,EAAQhC,YAAY,EACpBgC,EAAQ/B,a,+BAOJ,IAAD,OAEAiC,EAASlB,EAAUmB,KAAI,SAACC,GAChC,OAEE,kBAAC,EAAD,CACA5B,KAAM4B,EAAKlB,WACXN,KAAMwB,EAAK9B,GACXD,cAAe,EAAKkB,cACpBO,IAAKM,EAAKlB,WAEVJ,IAAKsB,EAAKjB,SAMV,OACE,yBAAKb,GAAG,gBACR,yBAAKA,GAAG,WAAWC,KAAKc,MAAMC,WAC7BY,O,GA/CenB,a,sBCtCPsB,MATf,WACE,OACE,yBAAK3B,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,IAAD,QCCc4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASjB,SAASM,eAAe,SD6H3C,kBAAmBY,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.f3cad5cc.chunk.js","sourcesContent":["import React,{Component} from 'react';\r\n\r\n\r\n\r\n\r\nclass Drumkey extends Component{\r\n\r\naudioSrc= React.createRef();\r\n\r\nplayAudio=()=>{\r\n  \r\n  this.audioSrc.current.currentTime =0\r\n  this.audioSrc.current.play()\r\n      \r\n}\r\n\r\nhandleActions=(event)=>{\r\n  this.playAudio()\r\n  this.props.handleDisplay(event)\r\n}\r\n\r\n\r\n  render(){\r\n    return (\r\n      \r\n    <div \r\n    id={\"pad-\"+this.props.keyS}\r\n    \r\n    onClick={this.handleActions} \r\n    className=\"drum-pad\"\r\n    data-name={this.props.name} \r\n    >\r\n    \r\n    {this.props.keyS}\r\n      <audio \r\n      id={this.props.keyS} \r\n      className=\"clip\"       \r\n      ref={this.audioSrc}\r\n      src={this.props.src}\r\n      />\r\n      \r\n      \r\n      \r\n    </div>\r\n    )\r\n\r\n  }\r\n}\r\n\r\nexport default Drumkey","import React,{Component} from 'react';\r\nimport Drumkey from \"./Drumkey\"\r\n// import soundData from './soundData'\r\nconst soundData = [{\r\n    keyCode: 81,\r\n    keyTrigger: 'Q',\r\n    id: 'Heater-1',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3'\r\n  }, {\r\n    keyCode: 87,\r\n    keyTrigger: 'W',\r\n    id: 'Heater-2',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3'\r\n  }, {\r\n    keyCode: 69,\r\n    keyTrigger: 'E',\r\n    id: 'Heater-3',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3'\r\n  }, {\r\n    keyCode: 65,\r\n    keyTrigger: 'A',\r\n    id: 'Heater-4',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3'\r\n  }, {\r\n    keyCode: 83,\r\n    keyTrigger: 'S',\r\n    id: 'Clap',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3'\r\n  }, {\r\n    keyCode: 68,\r\n    keyTrigger: 'D',\r\n    id: 'Open-HH',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3'\r\n  }, {\r\n    keyCode: 90,\r\n    keyTrigger: 'Z',\r\n    id: \"Kick-n'-Hat\",\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3'\r\n  }, {\r\n    keyCode: 88,\r\n    keyTrigger: 'X',\r\n    id: 'Kick',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3'\r\n  }, {\r\n    keyCode: 67,\r\n    keyTrigger: 'C',\r\n    id: 'Closed-HH',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3'\r\n  },\r\n];\r\n\r\n\r\n\r\n\r\nclass Drumpad extends Component{\r\n\r\n  state={soundName:\"none\"}\r\n  \r\nupdateDisplay=(event)=>{\r\n//console.log(event.target.getAttribute(\"data-name\"))\r\n       this.setState({soundName:event.target.getAttribute(\"data-name\")})\r\n\r\n}\r\n\r\n//add active class keydown and click\r\n\r\n  componentDidMount() {\r\n    document.addEventListener(\"keydown\",(e)=>{\r\n      const id = e.key.toUpperCase();   \r\n\r\n     const drumKey = document.getElementById(id)\r\n     \r\n     if(drumKey){\r\n       drumKey.currentTime=0\r\n       drumKey.play()\r\n      }\r\n      \r\n\r\n})\r\n  }\r\n\r\n  render(){\r\n\r\n    const keyPad = soundData.map((item)=>{\r\n  return (\r\n    \r\n    <Drumkey  \r\n    keyS={item.keyTrigger}\r\n    name={item.id} \r\n    handleDisplay={this.updateDisplay}\r\n    key={item.keyTrigger}\r\n    \r\n    src={item.url}/>\r\n    \r\n  )\r\n})\r\n\r\n\r\n    return (\r\n      <div id=\"drum-machine\">\r\n      <div id=\"display\">{this.state.soundName}</div>\r\n      {keyPad}\r\n    \r\n      </div>\r\n     \r\n    )\r\n\r\n  }\r\n}\r\n\r\nexport default Drumpad","import React from 'react';\r\n\r\nimport Drumpad from './components/Drumpad.js';\r\nimport ReactFCCtest from 'react-fcctest';\r\n\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Drumpad />\r\n      <ReactFCCtest />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}